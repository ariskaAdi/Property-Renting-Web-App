generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                    String     @id @default(uuid())
  role                  Role
  full_name             String     @db.VarChar(100)
  email                 String     @unique @db.VarChar(255)
  password_hash         String
  profile_picture       String?    @db.VarChar(255)
  is_verified           Boolean
  created_at            DateTime   @default(now())
  updated_at            DateTime   @updatedAt
  reset_password_otp    String?    @db.VarChar(6)
  verify_otp            String?    @db.VarChar(6)
  verify_otp_expires_at DateTime?
  bookings              bookings[]
  reviews               reviews[]
  tenants               tenants[]
}

model tenants {
  id           String       @id @default(uuid())
  user_id      String       @unique
  company_name String       @db.VarChar(100)
  address      String
  phone_number String       @db.VarChar(20)
  logo         String?      @db.VarChar(255)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  properties   properties[]
  user         users        @relation(fields: [user_id], references: [id])
}

model properties {
  id                String              @id @default(uuid())
  tenant_id         String
  name              String              @db.VarChar(150)
  description       String?
  address           String
  city              String              @db.VarChar(100)
  province          String              @db.VarChar(100)
  zip_code          String              @db.VarChar(10)
  latitude          Decimal             @db.Decimal(10, 8)
  longitude         Decimal             @db.Decimal(11, 8)
  main_image        String?             @db.VarChar(255)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?           @db.Timestamp(0)
  property_category PropertyCategory
  bookings          bookings[]
  peak_season_rates peak_season_rates[]
  tenant            tenants             @relation(fields: [tenant_id], references: [id])
  property_images   property_images[]
  reviews           reviews[]
  rooms             rooms[]
}

model property_images {
  id          String     @id @default(uuid())
  property_id String
  image_url   String     @db.VarChar(255)
  created_at  DateTime   @default(now())
  property    properties @relation(fields: [property_id], references: [id])
}

model rooms {
  id                String              @id @default(uuid())
  property_id       String
  name              String              @db.VarChar(100)
  description       String?
  base_price        Decimal             @db.Decimal(12, 2)
  capacity          Int
  image             String?             @db.VarChar(255)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?           @db.Timestamp(0)
  total_rooms       Int
  booking_rooms     booking_rooms[]
  peak_season_rates peak_season_rates[]
  room_availability room_availability[]
  room_images       room_images[]
  property          properties          @relation(fields: [property_id], references: [id])
}

model room_images {
  id         String   @id @default(uuid())
  room_id    String
  image_url  String   @db.VarChar(255)
  created_at DateTime @default(now())
  room       rooms    @relation(fields: [room_id], references: [id])
}

model room_availability {
  id             String   @id @default(uuid())
  room_id        String
  date           DateTime @db.Date
  is_available   Boolean
  price_override Decimal? @db.Decimal(12, 2)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  room           rooms    @relation(fields: [room_id], references: [id])

  @@unique([room_id, date])
}

model peak_season_rates {
  id                 String          @id @default(uuid())
  property_id        String
  room_id            String
  start_date         DateTime        @db.Date
  end_date           DateTime        @db.Date
  price_change_type  PriceChangeType
  price_change_value Decimal         @db.Decimal(12, 2)
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  property           properties      @relation(fields: [property_id], references: [id])
  room               rooms           @relation(fields: [room_id], references: [id])
}

model bookings {
  id               String          @id @default(uuid())
  user_id          String
  property_id      String
  status           BookingStatus
  check_in_date    DateTime        @db.Date
  check_out_date   DateTime        @db.Date
  total_price      Decimal         @db.Decimal(12, 2)
  payment_deadline DateTime        @default(dbgenerated("(now() + '01:00:00'::interval)"))
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  amount           Decimal         @db.Decimal(12, 2)
  paid_at          DateTime?
  proof_image      String?         @db.VarChar(255)
  booking_rooms    booking_rooms[]
  property         properties      @relation(fields: [property_id], references: [id])
  user             users           @relation(fields: [user_id], references: [id])
  reviews          reviews[]
}

model booking_rooms {
  id              String   @id @default(uuid())
  booking_id      String
  room_id         String
  guests_count    Int
  price_per_night Decimal  @db.Decimal(12, 2)
  check_in_date   DateTime @db.Date
  check_out_date  DateTime @db.Date
  nights          Int
  quantity        Int
  subtotal        Decimal  @db.Decimal(12, 2)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  check_in_date   DateTime @db.Date
  check_out_date  DateTime @db.Date
  quantity        Int
  booking         bookings @relation(fields: [booking_id], references: [id])
  room            rooms    @relation(fields: [room_id], references: [id])
}

model reviews {
  id           String     @id @default(uuid())
  booking_id   String
  user_id      String
  property_id  String
  comment      String?
  tenant_reply String?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  booking      bookings   @relation(fields: [booking_id], references: [id])
  property     properties @relation(fields: [property_id], references: [id])
  user         users      @relation(fields: [user_id], references: [id])
}

enum Role {
  user
  tenant
}

enum PriceChangeType {
  percentage
  nominal
}

enum BookingStatus {
  waiting_payment
  waiting_confirmation
  confirmed
  canceled
  canceled_by_tenant
  expired
}

enum PropertyCategory {
  apartment
  house
  villa
  hotel
  hostel
  guesthouse
}

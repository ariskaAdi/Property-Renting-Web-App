// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ---------- ENUMS ----------
enum Role {
  user
  tenant
}

enum PriceChangeType {
  percentage
  nominal
}

enum BookingStatus {
  waiting_payment
  waiting_confirmation
  confirmed
  canceled
  expired
}

enum PaymentMethod {
  manual_transfer
  payment_gateway
}

enum PaymentStatus {
  pending
  confirmed
  rejected
}

// ---------- MODELS ----------

model users {
  id                       String    @id @default(uuid())
  role                     Role
  full_name                String    @db.VarChar(100)
  email                    String    @unique @db.VarChar(255)
  password_hash            String
  profile_picture          String?   @db.VarChar(255)
  is_verified              Boolean
  verify_token             String?   @db.VarChar(255)
  verify_token_expires_at  DateTime?
  reset_password_token     String?   @db.VarChar(255)
  reset_password_expires_at DateTime?
  created_at               DateTime
  updated_at               DateTime

  tenants                  tenants[]
  bookings                 bookings[]
  reviews                  reviews[]
}

model tenants {
  id           String    @id @default(uuid())
  user_id      String
  company_name String    @db.VarChar(100)
  address      String
  phone_number String    @db.VarChar(20)
  logo         String?   @db.VarChar(255)
  created_at   DateTime
  updated_at   DateTime

  user         users     @relation(fields: [user_id], references: [id])
  properties   properties[]
}

model property_categories {
  id          String      @id @default(uuid())
  name        String      @db.VarChar(100)
  description String?
  created_at  DateTime
  updated_at  DateTime

  properties  properties[]
}

model properties {
  id           String               @id @default(uuid())
  tenant_id    String
  category_id  String
  name         String               @db.VarChar(150)
  description  String?
  address      String
  city         String               @db.VarChar(100)
  province     String               @db.VarChar(100)
  zip_code     String               @db.VarChar(10)
  latitude     Decimal              @db.Decimal(10, 8)
  longitude    Decimal              @db.Decimal(11, 8)
  main_image   String?               @db.VarChar(255)
  created_at   DateTime
  updated_at   DateTime

  tenant       tenants              @relation(fields: [tenant_id], references: [id])
  category     property_categories  @relation(fields: [category_id], references: [id])
  property_images property_images[]
  rooms        rooms[]
  peak_season_rates peak_season_rates[]
  bookings     bookings[]
  reviews      reviews[]
}

model property_images {
  id          String     @id @default(uuid())
  property_id String
  image_url   String     @db.VarChar(255)
  created_at  DateTime

  property    properties @relation(fields: [property_id], references: [id])
}

model rooms {
  id           String     @id @default(uuid())
  property_id  String
  name         String     @db.VarChar(100)
  description  String?
  base_price   Decimal    @db.Decimal(12, 2)
  capacity     Int
  image        String?    @db.VarChar(255)
  created_at   DateTime
  updated_at   DateTime

  property     properties @relation(fields: [property_id], references: [id])
  room_images  room_images[]
  room_availability room_availability[]
  peak_season_rates peak_season_rates[]
  booking_rooms booking_rooms[]
}

model room_images {
  id          String   @id @default(uuid())
  room_id     String
  image_url   String   @db.VarChar(255)
  created_at  DateTime

  room        rooms    @relation(fields: [room_id], references: [id])
}

model room_availability {
  id            String   @id @default(uuid())
  room_id       String
  date          DateTime @db.Date
  is_available  Boolean
  price_override Decimal? @db.Decimal(12, 2)
  created_at    DateTime
  updated_at    DateTime

  room          rooms    @relation(fields: [room_id], references: [id])
}

model peak_season_rates {
  id                  String           @id @default(uuid())
  property_id         String
  room_id             String
  start_date          DateTime         @db.Date
  end_date            DateTime         @db.Date
  price_change_type   PriceChangeType
  price_change_value  Decimal          @db.Decimal(12, 2)
  created_at          DateTime
  updated_at          DateTime

  property            properties       @relation(fields: [property_id], references: [id])
  room                rooms            @relation(fields: [room_id], references: [id])
}

model bookings {
  id               String         @id @default(uuid())
  user_id          String
  property_id      String
  status           BookingStatus
  check_in_date    DateTime       @db.Date
  check_out_date   DateTime       @db.Date
  total_price      Decimal        @db.Decimal(12, 2)
  payment_deadline DateTime
  created_at       DateTime
  updated_at       DateTime

  user             users          @relation(fields: [user_id], references: [id])
  property         properties     @relation(fields: [property_id], references: [id])
  booking_rooms    booking_rooms[]
  payments         payments[]
  reviews          reviews[]
}

model booking_rooms {
  id              String     @id @default(uuid())
  booking_id      String
  room_id         String
  guests_count    Int
  price_per_night Decimal    @db.Decimal(12, 2)
  nights          Int
  subtotal        Decimal    @db.Decimal(12, 2)
  created_at      DateTime
  updated_at      DateTime

  booking         bookings   @relation(fields: [booking_id], references: [id])
  room            rooms      @relation(fields: [room_id], references: [id])
}

model payments {
  id             String         @id @default(uuid())
  booking_id     String
  payment_method PaymentMethod
  proof_image    String?        @db.VarChar(255)
  amount         Decimal        @db.Decimal(12, 2)
  status         PaymentStatus
  paid_at        DateTime?
  created_at     DateTime
  updated_at     DateTime

  booking        bookings       @relation(fields: [booking_id], references: [id])
}

model reviews {
  id            String     @id @default(uuid())
  booking_id    String
  user_id       String
  property_id   String
  comment       String?
  tenant_reply  String?
  created_at    DateTime
  updated_at    DateTime

  booking       bookings   @relation(fields: [booking_id], references: [id])
  user          users      @relation(fields: [user_id], references: [id])
  property      properties @relation(fields: [property_id], references: [id])
}
